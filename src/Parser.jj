options
{
    // BUILD_TOKEN_MANAGER = false;
    JDK_VERSION = "1.8";
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    // USER_CHAR_STREAM = true;
}

PARSER_BEGIN(Parser)
package owl.lang;

import java.util.ArrayList;
import java.util.List;

public class Parser {
}

PARSER_END(Parser)

SKIP: {
    " "
  | "\r"
  | "\n"
  | "\t"
  | < "#" (~["\n"])* >
}

TOKEN:
{
    <AS: "as">
|   <FN: "fn">
|   <DOT: ".">
|   <COMMA: ",">
|   <COLON: ":">
|   <SEMICOLON: ";">
|   <LPAREN: "(">
|   <RPAREN: ")">
|   <LCURLY: "{">
|   <RCURLY: "}">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <ANN: "@">
|   <TILDE: "~">
|   <NOT: "!">
|   <MUL: "*">
|   <DIV: "/">
|   <PLS: "+">
|   <MNS: "-">
|   <ARROW: "=>">
|   <OCT: "0o" (["0"-"7"])+>
|   <DEC: (["0"-"9"])+>
|   <HEX: "0x" (["0"-"9", "a"-"f", "A"-"F"])+>
|   <NAME: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

AstModule module(): {
    AstModule module = new AstModule();
    AstFunction f;
}
{
    (
        f = function() { module.addFunction(f); }
    )*
    { return module; }
}

AstName qualifiedName(): {
    AstName name = new AstName();
    Token tok;
}
{
    tok = <NAME> { name.add(tok.image); }
    (
        <DOT> tok = <NAME> { name.add(tok.image); }
    )*
    { return name; }
}

AstFunction function(): {
    AstFunction function = new AstFunction();
    AstVariable a;
}
{
    <FN> function.name = <NAME>.image
    (
        <LPAREN>
        (
            a = variable() { function.args.add(a); }
            (
                "," a = variable() { function.args.add(a); }
            )*
        )?
        <RPAREN>
    )?
    (
        <COLON> function.returnType = type()
    )?
    function.block = block()
    { return function; }
}

AstVariable variable(): {
    AstVariable variable = new AstVariable();
    Token tok;
}
{
    tok = <NAME> { variable.name = tok.image; }
    (
        <COLON> variable.type = type()
    )?
    { return variable; }
}

AstBlock block(): {
    AstBlock block = new AstBlock();
    AstNode s;
}
{
    <LCURLY>
    (
        (
            s = statement() { block.statements.add(s); }
        )?
        <SEMICOLON>
    )*
    <RCURLY>
    { return block; }
}

AstNode prime(): {
    AstNode p = null;
    Token tok;
}
{
    (
        p = qualifiedName()
    |   tok = <OCT> { p = new AstConstant(tok.image); }
    |   tok = <DEC> { p = new AstConstant(tok.image); }
    |   tok = <HEX> { p = new AstConstant(tok.image); }
    |   <LPAREN> p = expression() <RPAREN>
    )
    { return p; }
}

AstNode call(): {
    AstNode res, arg;
    AstApply apply = null;
}
{
    res = prime()
    (
        { apply = new AstApply(); }
        (
        // Reqular call with ()
            { apply.args.add(res); }
            <LPAREN>
            (
                arg = expression() { apply.args.add(arg); }
                (
                    <COMMA> arg = expression() { apply.args.add(arg); }
                )*
            )?
            <RPAREN>

        // Array index []
        |
            {
                apply.args.add(new AstName("[]"));
                apply.args.add(res);
            }
            <LBRACKET>
            (
                arg = expression() { apply.args.add(arg); }
                (
                    <COMMA> arg = expression() { apply.args.add(arg); }
                )*
            )?
            <RBRACKET>
        )
        { res = apply; }
    )*
    { return res; }
}

AstNode cast(): {
    AstNode res, t;
}
{
    res = call()
    (
        <COLON> t = type()
        {
            AstApply apply = new AstApply();
            apply.args.add(new AstName(":"));
            apply.args.add(res);
            apply.args.add(t);
            res = apply;
        }
    )?
    { return res; }
}

AstNode unary(): {
    Token tok = null;
    AstNode n;
}
{
    (tok = <TILDE> | tok = <NOT> | tok = <PLS> | tok = <MNS>)? n = cast()
    {
        if (tok == null) {
            return n;
        }
        AstApply apply = new AstApply();
        apply.args.add(new AstName(tok.image));
        apply.args.add(n);
        return apply;
    }
}

AstNode expression(): {
    AstNode n;
}
{
    n = unary()
    { return n; }
}

AstNode statement(): {
    AstNode expr;
}
{
    expr = expression()
    { return expr; }
}

AstType baseType(): {
    AstType type = new AstType();
}
{
    type.name = qualifiedName()
    (
        <LPAREN>
        <RPAREN>

    |   <LBRACKET>
        <RBRACKET>
        {
            AstType generic = AstType.fromName("Array");
            generic.args.add(type);
            type = generic;
        }
    )?
    { return type; }
}

AstType type(): {
    AstType t1, t2;
    List<AstType> ts = null;
}
{
    t1 = baseType()
    (
        <ARROW> t2 = baseType()
        {
            if (ts == null) {
                ts = new ArrayList<AstType>();
                ts.add(t1);
            }
            ts.add(t2);
        }
    )*
    {
        if (ts == null) {
            return t1;
        } else {
            AstType generic = AstType.fromName("Fn");
            generic.args = ts;
            return generic;
        }
    }
}

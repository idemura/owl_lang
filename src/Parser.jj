options
{
    // BUILD_TOKEN_MANAGER = false;
    JDK_VERSION = "1.8";
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    // USER_CHAR_STREAM = true;
}

PARSER_BEGIN(Parser)
package owl.lang;

import java.util.ArrayList;
import java.util.List;

public class Parser {
}

PARSER_END(Parser)

SKIP: {
    " "
  | "\r"
  | "\n"
  | "\t"
  | < "#" (~["\n"])* >
}

TOKEN:
{
    <AS: "as">
  | <FN: "fn">
  | "." | ","
  | ":" | ";"
  | "(" | ")"
  | "{" | "}"
  | "[" | "]"
  | "=>"
  | <OCT: "0o" (["0"-"7"])+>
  | <DEC: (["0"-"9"])+>
  | <HEX: "0x" (["0"-"9", "a"-"f", "A"-"F"])+>
  | <NAME: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

AstModule module(): {
    AstModule module = new AstModule();
    AstFunction f;
}
{
    (f = function() { module.addFunction(f); })*
    { return module; }
}

AstName qualifiedName(): {
    AstName name = new AstName();
    Token tok;
}
{
    tok = <NAME> { name.add(tok.image); }
    ("." tok = <NAME> { name.add(tok.image); })*
    { return name; }
}

AstFunction function(): {
    AstFunction function = new AstFunction();
}
{
    <FN> function.name = <NAME>.image
    ("(" (function.arguments = variableList())? ")")?
    (":" function.returnType = type())?
    function.block = block()
    { return function; }
}

List<AstVariable> variableList(): {
    List<AstVariable> argList = new ArrayList<AstVariable>();
    AstVariable a;
}
{
    a = variable() { argList.add(a); }
    ("," a = variable() { argList.add(a); })*
    { return argList; }
}

AstVariable variable(): {
    AstVariable variable = new AstVariable();
    Token tok;
}
{
    tok = <NAME> { variable.name = tok.image; } (":" variable.type = type())?
    // Init expression!
    { return variable; }
}

AstBlock block(): {
    AstBlock block = new AstBlock();
    AstNode s;
}
{
    "{" ((s = statement() { block.nodes.add(s); })? ";")* "}"
    { return block; }
}

AstNode prime(): {
    AstNode p = null;
    Token tok;
}
{
    (
        p = qualifiedName()
      | tok = <OCT> { p = new AstConstant(tok.image); }
      | tok = <DEC> { p = new AstConstant(tok.image); }
      | tok = <HEX> { p = new AstConstant(tok.image); }
      | "(" p = expression() ")"
    )
    { return p; }
}

AstNode call(): {
    AstNode res, arg;
    AstApply apply = null;
}
{
    res = prime()
    (
        {
            apply = new AstApply();
        }
        (
            { apply.nodes.add(res); }
            "("
            (
                arg = expression() { apply.nodes.add(arg); }
                ("," arg = expression() { apply.nodes.add(arg); })*
            )?
            ")"
          |
            {
                apply.nodes.add(new AstName("[]"));
                apply.nodes.add(res);
            }
            "["
            (
                arg = expression() { apply.nodes.add(arg); }
                ("," arg = expression() { apply.nodes.add(arg); })*
            )?
            "]"
        )
        {
            res = apply;
        }
    )*
    { return res; }
}

AstNode cast(): {
    AstNode res, t;
}
{
    res = call()
    (
        ":" t = type()
        {
            AstApply n = new AstApply();
            n.nodes.add(new AstName(":"));
            n.nodes.add(res);
            n.nodes.add(t);
            res = n;
        }
    )?
    { return res; }
}

AstNode expression(): {
    AstNode n;
}
{
    n = cast()
    { return n; }
}

AstNode statement(): {
    AstNode expr;
}
{
    expr = expression()
    { return expr; }
}

AstType baseType(): {
    AstType type = new AstType();
}
{
    type.name = qualifiedName()
    (
        "(" ")"
      | "[" "]"
        {
            AstType arrayType = AstType.fromName("Array");
            arrayType.params.add(type);
            type = arrayType;
        }
      | {}
    )
    { return type; }
}

AstType type(): {
    AstType t1, t2;
    List<AstType> ts = null;
}
{
    t1 = baseType()
    (
        "=>" t2 = baseType()
        {
            if (ts == null) {
                ts = new ArrayList<AstType>();
                ts.add(t1);
            }
            ts.add(t2);
        }
    )*
    {
        if (ts == null) {
            return t1;
        } else {
            AstType functionType = AstType.fromName("Fn");
            functionType.params = ts;
            return functionType;
        }
    }
}

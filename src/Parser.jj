options
{
    // BUILD_TOKEN_MANAGER = false;
    JDK_VERSION = "1.8";
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    // USER_CHAR_STREAM = true;
}

PARSER_BEGIN(Parser)
package owl.lang;

import java.util.ArrayList;
import java.util.List;

public class Parser {
}

PARSER_END(Parser)

SKIP:
{
    " "
  | "\r"
  | "\n"
  | "\t"
  | < "#" (~["\n"])* >
}

TOKEN:
{
    <FN: "fn">
|   <AS: "is">
|   <NEW: "new">
|   <DOT: ".">
|   <COMMA: ",">
|   <COLON: ":">
|   <SEMICOLON: ";">
|   <LPAREN: "(">
|   <RPAREN: ")">
|   <LCURLY: "{">
|   <RCURLY: "}">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <ANN: "@">
|   <TILDE: "~">
|   <NOT: "!">
|   <MUL: "*">
|   <DIV: "/">
|   <MOD: "%">
|   <PLS: "+">
|   <MNS: "-">
|   <SIGNED_RSHIFT: ">>>">
|   <RSHIFT: ">>">
|   <LSHIFT: "<<">
|   <BIT_AND: "&">
|   <BIT_OR: "|">
|   <BIT_XOR: "^">
|   <ARROW: "=>">
|   <OCT: "0o" (["0"-"7"])+>
|   <DEC: (["0"-"9"])+>
|   <HEX: "0x" (["0"-"9", "a"-"f", "A"-"F"])+>
|   <NAME: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

AstModule module():
{
    AstModule m = new AstModule();
    AstFunction f;
}
{
    (
        f = function() { m.addFunction(f); }
    )*
    { return m; }
}

AstName qualifiedName():
{
    AstName n = new AstName();
    Token tok;
}
{
    tok = <NAME> { n.add(tok.image); }
    (
        <DOT> tok = <NAME> { n.add(tok.image); }
    )*
    { return n; }
}

AstFunction function():
{
    AstFunction f = new AstFunction();
    AstVariable arg;
}
{
    <FN> f.name = <NAME>.image
    (
        <LPAREN>
        (
            arg = variable() { f.args.add(arg); }
            (
                "," arg = variable() { f.args.add(arg); }
            )*
        )?
        <RPAREN>
    )?
    (
        <COLON> f.returnType = type()
    )?
    f.block = block()
    { return f; }
}

AstVariable variable():
{
    AstVariable v = new AstVariable();
    Token tok;
}
{
    tok = <NAME> { v.name = tok.image; }
    (
        <COLON> v.type = type()
    )?
    { return v; }
}

AstBlock block():
{
    AstBlock b = new AstBlock();
    AstNode s;
}
{
    <LCURLY>
    (
        (
            s = statement() { b.statements.add(s); }
        )?
        <SEMICOLON>
    )*
    <RCURLY>
    { return b; }
}

AstNode prime():
{
    AstNode p = null;
    Token tok;
}
{
    (
        p = qualifiedName()
    |   tok = <OCT> { p = new AstConstant(tok.image); }
    |   tok = <DEC> { p = new AstConstant(tok.image); }
    |   tok = <HEX> { p = new AstConstant(tok.image); }
    |   <LPAREN> p = expression() <RPAREN>
    )
    { return p; }
}

AstNode call():
{
    AstNode r, arg;
    AstApply apply = null;
}
{
    r = prime()
    (
        { apply = new AstApply(); }
        (
        // Reqular function call with ()
            { apply.args.add(r); }
            <LPAREN>
            (
                arg = expression() { apply.args.add(arg); }
                (
                    <COMMA> arg = expression() { apply.args.add(arg); }
                )*
            )?
            <RPAREN>

        // Array index []
        |
            {
                apply.args.add(new AstName("[]"));
                apply.args.add(r);
            }
            <LBRACKET>
            (
                arg = expression() { apply.args.add(arg); }
                (
                    <COMMA> arg = expression() { apply.args.add(arg); }
                )*
            )?
            <RBRACKET>
        )
        { r = apply; }
    )*
    { return r; }
}

AstNode cast():
{
    AstNode r, t;
}
{
    r = call()
    (
        <COLON> t = type()
        {
            AstApply apply = new AstApply();
            apply.args.add(new AstName(":"));
            apply.args.add(r);
            apply.args.add(t);
            r = apply;
        }
    )?
    { return r; }
}

AstNode unary():
{
    Token tok = null;
    AstNode n;
}
{
    (tok = <TILDE> | tok = <NOT> | tok = <PLS> | tok = <MNS>)? n = cast()
    {
        if (tok == null) {
            return n;
        }
        AstApply apply = new AstApply();
        apply.args.add(new AstName(tok.image));
        apply.args.add(n);
        return apply;
    }
}

String multiplicativeOp():
{
    Token tok;
}
{
    tok = <MUL> { return tok.image; }
|   tok = <DIV> { return tok.image; }
|   tok = <MOD> { return tok.image; }
}

AstNode multiplicative():
{
    String op;
    AstNode l, r;
}
{
    l = unary()
    (
        op = multiplicativeOp() r = unary()
        {
            AstApply apply = new AstApply();
            apply.args.add(new AstName(op));
            apply.args.add(l);
            apply.args.add(r);
            l = apply;
        }
    )*
    { return l; }
}

String additiveOp():
{
    Token tok;
}
{
    tok = <PLS> { return tok.image; }
|   tok = <MNS> { return tok.image; }
}

AstNode additive():
{
    String op;
    AstNode l, r;
}
{
    l = multiplicative()
    (
        op = additiveOp() r = multiplicative()
        {
            AstApply apply = new AstApply();
            apply.args.add(new AstName(op));
            apply.args.add(l);
            apply.args.add(r);
            l = apply;
        }
    )*
    { return l; }
}

String shiftOp():
{
    Token tok;
}
{
    tok = <LSHIFT> { return tok.image; }
|   tok = <RSHIFT> { return tok.image; }
|   tok = <SIGNED_RSHIFT> { return tok.image; }
}

AstNode shift():
{
    String op;
    AstNode l, r;
}
{
    l = additive()
    (
        op = shiftOp() r = additive()
        {
            AstApply apply = new AstApply();
            apply.args.add(new AstName(op));
            apply.args.add(l);
            apply.args.add(r);
            l = apply;
        }
    )*
    { return l; }
}

String bitwiseOp():
{
    Token tok;
}
{
    tok = <BIT_AND> { return tok.image; }
|   tok = <BIT_OR>  { return tok.image; }
|   tok = <BIT_XOR> { return tok.image; }
}

AstNode bitwise():
{
    String op;
    AstNode l, r;
}
{
    l = shift()
    (
        op = bitwiseOp() r = shift()
        {
            AstApply apply = new AstApply();
            apply.args.add(new AstName(op));
            apply.args.add(l);
            apply.args.add(r);
            l = apply;
        }
    )*
    { return l; }
}

AstNode expression():
{
    AstNode n;
}
{
    n = bitwise()
    { return n; }
}

AstNode statement():
{
    AstNode expr;
}
{
    expr = expression() { return expr; }
}

AstType baseType():
{
    AstType t = new AstType(), arg;
}
{
    t.name = qualifiedName()
    (
        <LPAREN>
        arg = type() { t.args.add(arg); }
        (
            <COMMA> arg = type() { t.args.add(arg); }
        )*
        <RPAREN>
    |   (
            <LBRACKET>
            <RBRACKET>
            {
                AstType arrayType = AstType.fromName("Array");
                arrayType.args.add(t);
                t = arrayType;
            }
        )+
    )?
    { return t; }
}

AstType type():
{
    AstType t, s, functionType = null;
}
{
    t = baseType()
    (
        <ARROW> s = baseType()
        {
            if (functionType == null) {
                functionType = AstType.fromName("Fn");
                functionType.args.add(t);
                t = functionType;
            }
            functionType.args.add(s);
        }
    )*
    { return t; }
}

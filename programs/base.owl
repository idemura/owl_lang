#hello
# Owl Language

fn f1() {}

fn f3(x, y: I32) {
    f1();
    f2(x);
    f3(x, y);
    module.f3(mod.x, y);
    arr[x];
    map[x, z];
    f4()(x)[10];
    (f2)(x);
    f2().x;
    f2()[10];
    a[i].y;
    a[i].y.z;
}

fn f4() {
    g(10, 20) : I32;
    g(10 : owl.lang.String);
    g(50 : I32[]);
}

fn f5(): I32 => Char => Bool {
    50 : I32 => Bool;
    12 : Generic(I32);
    13 : Generic(I32, String, Bool);
    14 : Generic(I32 => Bool, String[], Bool => owl.lang.Char[]);
    15 : I32[][] => I64 => Bool;
}

fn f6() {
    f(~10);
    f(~10 : I32);
    f(- 100);
    f(-100, !(a : I32));
    f(-100, !a : I32);
    f(-100, (!a) : I32);
    +f(10);
    +f(10) : I32;
    -3++6;
}

fn f7 {
    2 * 3 / 5;
    2 * 3 / 5  % 9;
    -2 * +4 / -5 % +6;
    foo(2, 3) * -10 + 80 * (2 + g()) - a[10];
    a << 10 >>> 8 >> 1;
    a & 1<<8 | 1<<6;
    a & b | 1 + 6 & 3;
    a | b ^ c & d;
}

fn f8 {
    a >= b == c < d;
    a < b < c;
    a & 10 == b & 1<<4;
    a is 10 == b is 20;
    !a == 13;
    !a is 13;
    !a == 12 + 1;
    f & 1<<8 && !3 * y < 7 || !b == true;
}

fn f9 {
    x = width(window) * height(window) - square(r, 0) >>> 2;
    a[i] += f(true && !b);
}

fn f10 {
    if a < b && !width(x) + 10 = height(x) {
        print(10);
    }

    if f(r, r & 5) {
        print(10);
    } else {
        print(20);
    }

    if true && false {
        print(10);
    } elif m + 10 == 12 {
        print(11);
    } elif m - 10 == 12 {
        print(12);
    }

    if true && false {
        print(10);
    } elif m + 10 == 12 {
        print(11);
    } elif m - 10 == 12 {
        print(12);
    } else {
        print(13);
    }
}

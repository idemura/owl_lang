Module
  Variable zzz
    Literal "world"
  
  Function f1
    returnType: Type None
    Block
  
  Function f2
    returnType: Type None
    Argument x
      Type I32
    Block
      Expr
        Apply
          Name print
          Literal "hello"
      ;
      Expr
        Apply
          Name print
          Literal 127
      ;
  
  Function f3
    returnType: Type None
    Argument x
      Type None
    Argument y
      Type I32
    Block
      Expr
        Apply
          Name f1
      ;
      Expr
        Apply
          Name f2
          Name x
      ;
      Expr
        Apply
          Name f3
          Name x
          Name y
      ;
      Expr
        Apply
          Member
            Name module
            Name f3
          Member
            Name mod
            Name x
          Name y
      ;
      Expr
        Apply
          Name []
          Name arr
          Name x
      ;
      Expr
        Apply
          Name []
          Name map
          Name x
          Name z
      ;
      Expr
        Apply
          Name []
          Apply
            Apply
              Name f4
            Name x
          Literal 10
      ;
      Expr
        Apply
          Name f2
          Name x
      ;
      Expr
        Member
          Apply
            Name f2
          Name x
      ;
      Expr
        Apply
          Name []
          Apply
            Name f2
          Literal 10
      ;
      Expr
        Member
          Apply
            Name []
            Name a
            Name i
          Name y
      ;
      Expr
        Member
          Member
            Apply
              Name []
              Name a
              Name i
            Name y
          Name z
      ;
  
  Function f4
    returnType: Type None
    Block
      Expr
        Apply
          Name :
          Apply
            Name g
            Literal 10
            Literal 20
          Type I32
      ;
      Expr
        Apply
          Name g
          Apply
            Name :
            Literal 10
            Type owl.lang.String
      ;
      Expr
        Apply
          Name g
          Apply
            Name :
            Literal 50
            Type Array
              Type I32
      ;
  
  Function f5
    returnType: Type Fn
      Type I32
      Type Char
      Type Bool
    Block
      Expr
        Apply
          Name :
          Literal 50
          Type Fn
            Type I32
            Type Bool
      ;
      Expr
        Apply
          Name :
          Literal 12
          Type Generic
            Type I32
      ;
      Expr
        Apply
          Name :
          Literal 13
          Type Generic
            Type I32
            Type String
            Type Bool
      ;
      Expr
        Apply
          Name :
          Literal 14
          Type Generic
            Type Fn
              Type I32
              Type Bool
            Type Array
              Type String
            Type Fn
              Type Bool
              Type Array
                Type owl.lang.Char
      ;
      Expr
        Apply
          Name :
          Literal 15
          Type Fn
            Type Array
              Type Array
                Type I32
            Type I64
            Type Bool
      ;
  
  Function f6
    returnType: Type None
    Block
      Expr
        Apply
          Name f
          Apply
            Name ~
            Literal 10
      ;
      Expr
        Apply
          Name f
          Apply
            Name ~
            Apply
              Name :
              Literal 10
              Type I32
      ;
      Expr
        Apply
          Name f
          Apply
            Name -
            Literal 100
      ;
      Expr
        Apply
          Name f
          Apply
            Name -
            Literal 100
          Apply
            Name !
            Apply
              Name :
              Name a
              Type I32
      ;
      Expr
        Apply
          Name f
          Apply
            Name -
            Literal 100
          Apply
            Name !
            Apply
              Name :
              Name a
              Type I32
      ;
      Expr
        Apply
          Name f
          Apply
            Name -
            Literal 100
          Apply
            Name :
            Apply
              Name !
              Name a
            Type I32
      ;
      Expr
        Apply
          Name +
          Apply
            Name f
            Literal 10
      ;
      Expr
        Apply
          Name +
          Apply
            Name :
            Apply
              Name f
              Literal 10
            Type I32
      ;
      Expr
        Apply
          Name +
          Apply
            Name -
            Literal 3
          Apply
            Name +
            Literal 6
      ;
  
  Function f7
    returnType: Type None
    Block
      Expr
        Apply
          Name /
          Apply
            Name *
            Literal 2
            Literal 3
          Literal 5
      ;
      Expr
        Apply
          Name %
          Apply
            Name /
            Apply
              Name *
              Literal 2
              Literal 3
            Literal 5
          Literal 9
      ;
      Expr
        Apply
          Name %
          Apply
            Name /
            Apply
              Name *
              Apply
                Name -
                Literal 2
              Apply
                Name +
                Literal 4
            Apply
              Name -
              Literal 5
          Apply
            Name +
            Literal 6
      ;
      Expr
        Apply
          Name -
          Apply
            Name +
            Apply
              Name *
              Apply
                Name foo
                Literal 2
                Literal 3
              Apply
                Name -
                Literal 10
            Apply
              Name *
              Literal 80
              Apply
                Name +
                Literal 2
                Apply
                  Name g
          Apply
            Name []
            Name a
            Literal 10
      ;
      Expr
        Apply
          Name >>
          Apply
            Name >>>
            Apply
              Name <<
              Name a
              Literal 10
            Literal 8
          Literal 1
      ;
      Expr
        Apply
          Name |
          Apply
            Name &
            Name a
            Apply
              Name <<
              Literal 1
              Literal 8
          Apply
            Name <<
            Literal 1
            Literal 6
      ;
      Expr
        Apply
          Name |
          Apply
            Name &
            Name a
            Name b
          Apply
            Name &
            Apply
              Name +
              Literal 1
              Literal 6
            Literal 3
      ;
      Expr
        Apply
          Name |
          Name a
          Apply
            Name ^
            Name b
            Apply
              Name &
              Name c
              Name d
      ;
  
  Function f8
    returnType: Type None
    Block
      Expr
        Apply
          Name ==
          Apply
            Name >=
            Name a
            Name b
          Apply
            Name <
            Name c
            Name d
      ;
      Expr
        Apply
          Name <
          Apply
            Name <
            Name a
            Name b
          Name c
      ;
      Expr
        Apply
          Name ==
          Apply
            Name &
            Name a
            Literal 10
          Apply
            Name &
            Name b
            Apply
              Name <<
              Literal 1
              Literal 4
      ;
      Expr
        Apply
          Name is
          Apply
            Name ==
            Apply
              Name is
              Name a
              Literal 10
            Name b
          Literal 20
      ;
      Expr
        Apply
          Name !
          Apply
            Name ==
            Name a
            Literal 13
      ;
      Expr
        Apply
          Name !
          Apply
            Name is
            Name a
            Literal 13
      ;
      Expr
        Apply
          Name !
          Apply
            Name ==
            Name a
            Apply
              Name +
              Literal 12
              Literal 1
      ;
      Expr
        Apply
          Name ||
          Apply
            Name &&
            Apply
              Name &
              Name f
              Apply
                Name <<
                Literal 1
                Literal 8
            Apply
              Name !
              Apply
                Name <
                Apply
                  Name *
                  Literal 3
                  Name y
                Literal 7
          Apply
            Name !
            Apply
              Name ==
              Name b
              Name true
      ;
  
  Function f9
    returnType: Type None
    Block
      Expr
        Apply
          Name =
          Name x
          Apply
            Name >>>
            Apply
              Name -
              Apply
                Name *
                Apply
                  Name width
                  Name window
                Apply
                  Name height
                  Name window
              Apply
                Name square
                Name r
                Literal 0
            Literal 2
      ;
      Expr
        Apply
          Name +=
          Apply
            Name []
            Name a
            Name i
          Apply
            Name f
            Apply
              Name &&
              Name true
              Apply
                Name !
                Name b
      ;
  
  Function f10
    returnType: Type None
    Block
      If
        Apply
          Name =
          Apply
            Name &&
            Apply
              Name <
              Name a
              Name b
            Apply
              Name !
              Apply
                Name +
                Apply
                  Name width
                  Name x
                Literal 10
          Apply
            Name height
            Name x
        # elif:
        Block
          Expr
            Apply
              Name print
              Literal 10
          ;
      ;
      If
        Apply
          Name f
          Name r
          Apply
            Name &
            Name r
            Literal 5
        # elif:
        Block
          Expr
            Apply
              Name print
              Literal 10
          ;
        # else:
        Block
          Expr
            Apply
              Name print
              Literal 20
          ;
      ;
      If
        Apply
          Name &&
          Name true
          Name false
        # elif:
        Block
          Expr
            Apply
              Name print
              Literal 10
          ;
        # elif condition:
        Apply
          Name ==
          Apply
            Name +
            Name m
            Literal 10
          Literal 12
        # then:
        Block
          Expr
            Apply
              Name print
              Literal 11
          ;
        # elif condition:
        Apply
          Name ==
          Apply
            Name -
            Name m
            Literal 10
          Literal 12
        # then:
        Block
          Expr
            Apply
              Name print
              Literal 12
          ;
      ;
      If
        Apply
          Name &&
          Name true
          Name false
        # elif:
        Block
          Expr
            Apply
              Name print
              Literal 10
          ;
        # elif condition:
        Apply
          Name ==
          Apply
            Name +
            Name m
            Literal 10
          Literal 12
        # then:
        Block
          Expr
            Apply
              Name print
              Literal 11
          ;
        # elif condition:
        Apply
          Name ==
          Apply
            Name -
            Name m
            Literal 10
          Literal 12
        # then:
        Block
          Expr
            Apply
              Name print
              Literal 12
          ;
        # else:
        Block
          Expr
            Apply
              Name print
              Literal 13
          ;
      ;
  
  Function f11
    returnType: Type None
    Block
      Match
        .None 
        Block
          Expr
            Apply
              Name print
              Apply
                Name s
          ;
        .Just x
        Block
          Expr
            Apply
              Name print
              Name x
          ;
      ;
      Match
        .Blue 
        .Green 
        Block
          Expr
            Apply
              Name print
              Name color
          ;
      ;
      Match
        .Blue 
        .Yellow 
        Block
        # Else (default)
        Block
          Expr
            Apply
              Name print
              Name zzz
          ;
      ;
  
  Function f12
    returnType: Type I32
    Argument x
      Type None
    Argument y
      Type I32
    Block
      Return
        Apply
          Name +
          Name x
          Name y
      ;
      Return
        Apply
          Name +
          Member
            Apply
              Name []
              Name a
              Name x
            Name numberInt
          Name y
      ;
      Return
      ;
  
  Variable PI
    Literal 3
  

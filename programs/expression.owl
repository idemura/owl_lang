module expression;

testArithm() {
    assert(1 + 2 * 3 == 7);
    assert(2 + 7 - 3 == 6);
    assert(2 + 7 / 3 == 4);
    assert(2 + 7 % 3 == 3);
    assert(2 * 7 / 3 == 4);
    assert((2 + 7) / 3 == 3);
    assert(9 / (1 + 2) == 3);
    assert(9 % (1 + 2) == 0);
    println(10 // 3);
    println(10 // 5);
}

testBitOps() {
    assert(4 >>> 1 == 2);
    assert(4 >> 1 == 2);
    assert(4 << 1 == 8);
    assert(3 + 1 >>> 2 - 1 == 2);
    assert(2 + 2 >> 2 - 1 == 2);
    assert(1 + 3 << 2 - 1 == 8);
    assert((3 + 1 >>> 1) - 1 == 1);
    assert((2 + 2 >> 1) - 1 == 1);
    assert((1 + 3 << 1) - 1 == 7);
    assert(7 >> 1 & 5 == 1);
    assert(3 << 1 & 5 == 4);
    assert(7 >> (1 & 5) == 3);
    assert(3 << (1 & 5) == 6);
    assert(3 ^ 5 == 6);
    assert(3 ^ 5 ^ 1 == 7);
    assert(3 | 5 == 7);
    assert(3 | 5 | 1 == 7);
    assert(3 ^ 4 | 1 == 7);
    assert(3 ^ (4 | 1) == 6);
    assert(3 | 4 ^ 1 == 7);
    assert((3 | 4) ^ 1 == 6);
}

testUnary() {
    assert(-1 == -1);
    assert(~1 == -2);
    assert(+1 == 1);
    assert(-1 + 1 == 0);
    assert(~1 + 2 == 0);
    assert(+1 - 1 == 0);
}

testCompare() {
    var a = "ac";
    var b1 = "ab";
    var b2 = "ab";
    assert(b1 < a);
    assert(a > b2);
    assert(b1 == b2);
    assert(2 + 3 > 4);
    assert(2 * 3 < 7);
    assert(2 * 3 == 6);
    assert(3 * 2 != 5);
}

testLogical() {
    var s = "hello";
    var b = size(s) == 5;
    assert(b);
    # assert(!!b);
    assert(!size(s) == 4);
}

# Test (...) as well
intOverload(x: I32): I32 { return (32); }
intOverload(x: I64): I32 { return (64); }

testCast() {
    var x = 1;
    var z = x : I64;
    assert(intOverload(z) == 64);
    var y = z : I32;
    assert(intOverload(y) == 32);
    assert(x : Bool);
    assert(!((1 - x) : Bool));
}

testString() {
    var s = "ab";
    assert(s == "ab");
    s += "c";
    assert(s == "abc");
    var t = "01";
    assert(s + t == "abc01");
    assert("01" + s == "01abc");
}

main(argv: String[]) {
    testArithm();
    testBitOps();
    testUnary();
    testCompare();
    testLogical();
    testCast();
    testString();
}
